/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  OUTPUT_DIRECTORY="abdl";
  static = false;
}

PARSER_BEGIN(ABDLParser)
package abdl;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class ABDLParser
{
	public boolean seenEmail = false;
	public boolean seenBirthday = false;
  
	public static void main(String[] args) throws FileNotFoundException
	{
		FileInputStream is = new FileInputStream(new File("./test/correct/nasser.abdl"));
		ABDLParser parser = new ABDLParser(is);
		try {
			parser.AddressBook();
			System.out.println("Input OK");
		} catch (ParseException e) {
			e.printStackTrace();
		}
	}
}

PARSER_END(ABDLParser)

< DEFAULT, IN_ABDL, IN_PERSON > SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

< DEFAULT, IN_ABDL, IN_PERSON > TOKEN :
{
  < LB : "(" >
| < RB : ")" >
| < #QT : "\"" >
}

TOKEN : // KEYWORDS
{
  < ADDRESSBOOK : "addressbook" >
| < ABDLNAME : < QT > ("\\\"" | ~["\""])* < QT > >
| < DLCB : "{" > : IN_ABDL
}

< IN_ABDL > TOKEN :
{
  < PERSON : "person" >
| < PERSONNAME : < QT > (["a"-"z", "A"-"Z", "-", " "])+ < QT > >
| < ALCB : "{" > : IN_PERSON
| < ARCB : "}" > : DEFAULT
}

< IN_PERSON > TOKEN :
{
  < ADDRESS : "address" >
| < BIRTHDATE : "birthdate" >
| < PHONE : "phone" >
| < EMAIL : "email" >
| < PRCB : "}" > : IN_ABDL
}

< IN_PERSON > TOKEN : // TYPES
{
  < TYPE :
    "mobile"
  | "home"
  | "work"
  | "other" >
}

< IN_PERSON > TOKEN : // FORMATTED DATA
{
< ADDRESSLINE:  < QT > (["a"-"z", "A"-"Z", "0"-"9", "-", ",", "/", " "])+ < QT > >

| < EMAIL_ADDRESS : (["a"-"z", "A"-"Z", "0"-"9", "!", "#", "$", "%", "&",
 "'", "*", "+"-"/", "=", "?", "^", "_", "`", "{", "|", "}" , "~", ".", "-"])+ "@"
 (< HOSTPART >)+ ("." (< HOSTPART >)+)* >
| < #HOSTPART : (["a"-"z", "A"-"Z", "0"-"9", "-"])+ >

| < PHONE_NUM : ("+")? (["0"-"9"])+ (< EXT > (["0"-"9"])+)? >
| < #EXT : (" ")+ "ext" (" ")+ >

| < DATE : < DAY > (" ")+ < MONTH > (" ")+ < YEAR >>
| < #DAY : (["0"-"9"]){1, 2} >
| < #YEAR : (["0"-"9"]){4} >
| < #MONTH :
    "January"
  | "February"
  | "March"
  | "April"
  | "May"
  | "June"
  | "July"
  | "August"
  | "September"
  | "October"
  | "November"
  | "December" >
}

void AddressBook() :
{}
{
  < ADDRESSBOOK > < ABDLNAME > < DLCB >
  (Person())*
  < ARCB > < EOF >
}

void Person() :
{}
{
  { seenEmail = false; seenBirthday = false; }
  < PERSON > < PERSONNAME > < ALCB >
  (Birthday() | Phone() | Email() | Address())*
  < PRCB >
}

void Birthday() :
{}
{
  { if (seenBirthday) throw new ParseException("Already seen birthday"); }
  < BIRTHDATE > < DATE > { seenBirthday = true; }
}

void Phone() :
{}
{
  < PHONE > < LB > < TYPE > < RB > < PHONE_NUM >
}

void Email() :
{}
{
  { if (seenEmail) throw new ParseException("Already seen email"); }
  < EMAIL > < EMAIL_ADDRESS > { seenEmail = true; }
}

void Address() :
{}
{
  < ADDRESS > < LB > < TYPE > < RB > < ADDRESSLINE >
}